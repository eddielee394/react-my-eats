{"version":3,"sources":["app/services/errorHandler/index.js","app/services/errorHandler/errorHandler.js","app/config/appConfig.js","app/services/crescendoRecipeApi/index.js","app/services/crescendoRecipeApi/crescendoRecipeApi.js","app/services/api/api.js","app/services/api/index.js","app/components/recipes/recipeList/recipeListItem.js","app/components/recipes/recipeList/recipeList.js"],"names":["ErrorHandler","getGeneralApiError","response","problem","error","data","message","temporary","APP_CONFIG","appName","process","REACT_APP_NAME","appUrl","apiBaseUrl","apiAdapter","CrescendoRecipeApi","api","create","baseURL","timeout","headers","Accept","baseUrl","getRecipes","a","async","get","getIngredientSpecials","specials","ok","errorHandler","console","log","convertData","uuid","title","description","images","full","medium","small","gallery","generateDummyData","path","servings","prepTime","cookTime","postDate","editDate","ingredients","map","d","index","amount","measurement","name","image","directions","instructions","optional","specialsCount","filterCollectionByObjProp","length","rawData","getRecipe","id","ingredientId","type","geo","text","htmlParser","getIngredientSpecial","this","instance","filteredIngredientSpecials","filter","special","some","ingredient","getSpecials","getSpecial","Api","useStyles","makeStyles","theme","favoriteButton","specialsIcon","color","palette","background","paper","backgroundColor","secondary","border","recipeTimeIcon","contrastText","marginLeft","RecipeListItem","props","useState","favorited","setFavorited","recipe","classes","recipeTime","hasSpecials","className","data-testid","Card","CardHeader","avatar","Avatar","Typography","variant","subheader","formatTimeFromNow","action","IconButton","onClick","CardMedia","src","alt","to","CardContent","Tooltip","arrow","Badge","badgeContent","overlap","badge","fontSize","component","gutterBottom","CardActions","disableSpacing","Button","showNotification","size","Chip","icon","label","RecipeListComponent","recipes","key","RecipeList","setRecipes","isLoading","setIsLoading","useEffect","toast","autoClose","getRecipeData","loader","loadingProps","loaderType"],"mappings":"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","file":"static/js/9.095ef81a.chunk.js","sourcesContent":["import ErrorHandler from './errorHandler';\nexport default ErrorHandler;\n","class ErrorHandler {\n  /**\n   * Attempts to get a common cause of problems from an api response.\n   *\n   * @param response The api response.\n   */\n  getGeneralApiError = response => {\n    switch (response.problem) {\n      case \"CONNECTION_ERROR\":\n        return {\n          error: true,\n          data: { message: \"cannot-connect\", temporary: true }\n        };\n      case \"NETWORK_ERROR\":\n        return {\n          error: true,\n          data: { message: \"network error\", temporary: true }\n        };\n      case \"TIMEOUT_ERROR\":\n        return { error: true, data: { message: \"timeout\", temporary: true } };\n      case \"SERVER_ERROR\":\n        return { error: true, data: { message: \"server\", temporary: true } };\n      case \"UNKNOWN_ERROR\":\n        return { error: true, data: { message: \"unknown\", temporary: true } };\n      case \"CLIENT_ERROR\":\n        switch (response.message) {\n          case 401:\n            return { data: { message: \"unauthorized\" } };\n          case 403:\n            return { data: { message: \"forbidden\" } };\n          case 404:\n            return { data: { message: \"not-found\", data: response.data } };\n          default:\n            return { data: { message: \"rejected\", data: response.data } };\n        }\n      case \"CANCEL_ERROR\":\n        return null;\n      default:\n        return {\n          error: true,\n          message: \"cannot-connect api error\",\n          temporary: true\n        };\n    }\n  };\n}\n\nexport default ErrorHandler;\n","export const APP_CONFIG = {\n  appName: process.env.REACT_APP_NAME || \"MyEats\",\n  appUrl: process.env.REACT_APP_BASE_URL || process.env.PUBLIC_URL,\n  apiBaseUrl: process.env.REACT_APP_API_URL || \"/api\",\n  apiAdapter: process.env.REACT_APP_API_ADAPTER || \"mock-adapter\"\n};\n","import CrescendoRecipeApi from './crescendoRecipeApi';\nexport default CrescendoRecipeApi;\n","import { create } from \"apisauce\";\nimport ErrorHandler from \"../errorHandler\";\nimport {\n  filterCollectionByObjProp,\n  generateDummyData,\n  htmlParser\n} from \"../../utils/helpers\";\nimport { APP_CONFIG } from \"../../config/appConfig\";\n\nclass CrescendoRecipeApi {\n  constructor() {\n    this.errorHandler = new ErrorHandler();\n  }\n\n  api = create({\n    baseURL: APP_CONFIG.apiBaseUrl,\n    timeout: 10000,\n    headers: {\n      Accept: \"application/json\"\n    }\n  });\n\n  //todo github.io temp fix to handle the diff between the json server & mock api urls\n  // when it comes to managing the image url paths\n  baseUrl =\n    process.env.REACT_APP_API_ADAPTER === \"mock-adapter\"\n      ? APP_CONFIG.appUrl\n      : APP_CONFIG.apiBaseUrl;\n\n  /**\n   * Gets all recipes\n   *\n   * @return {Promise<{ data: {uuid: string, title: string, description: string, images: {full: string, medium: string, small: string}, servings: number, prepTime: number, cookTime: number, postDate: Date, editDate: Date, ingredients: {uuid: string, amount: string, measurement: string, name: string}[], directions: {instructions: string, \"optional\": boolean}[], specialsCount: number}[], message: string}>}\n   */\n  getRecipes = async () => {\n    const response = await this.api.get(\"/recipes\");\n    const specials = await this.getIngredientSpecials();\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const error = this.errorHandler.getGeneralApiError(response);\n\n      if (error) {\n        console.log(\"Api problem\", error);\n        return error;\n      }\n    }\n\n    const convertData = data => {\n      return {\n        uuid: data.uuid,\n        title: data.title,\n        description: data.description,\n        images: {\n          full: `${this.baseUrl}${data.images.full}`,\n          medium: `${this.baseUrl}${data.images.medium}`,\n          small: `${this.baseUrl}${data.images.small}`,\n          gallery: generateDummyData(\n            { title: \"test\", path: \"https://loremflickr.com/320/240/food\" },\n            14\n          )\n        },\n        servings: data.servings,\n        prepTime: data.prepTime,\n        cookTime: data.cookTime,\n        postDate: data.postDate,\n        editDate: data.editDate,\n        ingredients: data.ingredients.map((d, index) => {\n          return {\n            uuid: d.uuid,\n            amount: d.amount,\n            measurement: d.measurement,\n            name: d.name,\n            image: `https://loremflickr.com/100/100/food?random=${index}`\n          };\n        }),\n        directions: data.directions.map(d => {\n          return {\n            instructions: d.instructions,\n            optional: d.optional\n          };\n        }),\n        specialsCount: filterCollectionByObjProp(\n          specials.data,\n          data.ingredients,\n          \"ingredientId\",\n          \"uuid\"\n        ).length\n      };\n    };\n\n    // transform the data into the format we are expecting\n    try {\n      const rawData = response.data;\n      const data = rawData.map(d => convertData(d));\n\n      return { message: \"ok\", data };\n    } catch {\n      return { message: \"bad-data\", data: response.data };\n    }\n  };\n\n  /**\n   * Fetches a single recipe\n   * @param id\n   * @return {Promise<{ data: {uuid: string, title: string, description: string, images: {full: string, medium: string, small: string}, servings: number, prepTime: number, cookTime: number, postDate: Date, editDate: Date, ingredients: {uuid: string, amount: string, measurement: string, name: string}[], directions: {instructions: string, \"optional\": boolean}[], specialsCount: number}[], message: string}>}\n   */\n  getRecipe = async id => {\n    const response = await this.api.get(`/recipes/${id}`);\n    const specials = await this.getIngredientSpecials();\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const error = this.errorHandler.getGeneralApiError(response);\n\n      if (error) {\n        console.log(\"Api problem\", error);\n        return error;\n      }\n    }\n\n    const convertData = data => {\n      return {\n        uuid: data.uuid,\n        title: data.title,\n        description: data.description,\n        images: {\n          full: `${this.baseUrl}${data.images.full}`,\n          medium: `${this.baseUrl}${data.images.medium}`,\n          small: `${this.baseUrl}${data.images.small}`,\n          gallery: generateDummyData(\n            { title: \"test\", path: \"https://loremflickr.com/320/240/food\" },\n            14\n          )\n        },\n        servings: data.servings,\n        prepTime: data.prepTime,\n        cookTime: data.cookTime,\n        postDate: data.postDate,\n        editDate: data.editDate,\n        ingredients: data.ingredients.map((d, index) => {\n          return {\n            uuid: d.uuid,\n            amount: d.amount,\n            measurement: d.measurement,\n            name: d.name,\n            image: `https://loremflickr.com/100/100/food?random=${index}`\n          };\n        }),\n        directions: data.directions.map(d => {\n          return {\n            instructions: d.instructions,\n            optional: d.optional\n          };\n        }),\n        specialsCount: filterCollectionByObjProp(\n          specials.data,\n          data.ingredients,\n          \"ingredientId\",\n          \"uuid\"\n        ).length\n      };\n    };\n\n    // transform the data into the format we are expecting\n    try {\n      const data = convertData(response.data);\n\n      return { message: \"ok\", data };\n    } catch {\n      return { message: \"bad-data\", data: response.data };\n    }\n  };\n\n  /**\n   * Fetches specials by ingredient\n   * @return {Promise<{data: {geo?: string, ingredientId: string, text?: string, type: string, title: string, uuid: string}, message: string}>}\n   */\n  getIngredientSpecials = async () => {\n    const response = await this.api.get(\"/specials\");\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const error = this.errorHandler.getGeneralApiError(response);\n\n      if (error) {\n        console.log(\"Api problem\", error);\n        return error;\n      }\n    }\n\n    const convertData = data => {\n      return {\n        uuid: data.uuid,\n        ingredientId: data.ingredientId,\n        type: data.type,\n        title: data.title,\n        geo: data.geo,\n        text: htmlParser(data.text)\n      };\n    };\n\n    // transform the data into the format we are expecting\n    try {\n      const rawData = response.data;\n      const data = rawData.map(d => convertData(d));\n\n      return { message: \"ok\", data };\n    } catch {\n      return { message: \"bad-data\", data: response.data };\n    }\n  };\n\n  /**\n   * Fetches a single special\n   * @param {string} id\n   * @returns {Promise<{data: {geo?: string, ingredientId: string, text: string, type: string, title: string, uuid: string}, message: string}>}\n   */\n  getIngredientSpecial = async id => {\n    const response = await this.api.get(`/specials/${id}`);\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const error = this.errorHandler.getGeneralApiError(response);\n\n      if (error) {\n        console.log(\"Api problem\", error);\n        return error;\n      }\n    }\n\n    const convertData = data => {\n      return {\n        uuid: data.uuid,\n        ingredientId: data.ingredientId,\n        type: data.type,\n        title: data.title,\n        geo: data.geo,\n        text: htmlParser(data.text)\n      };\n    };\n\n    // transform the data into the format we are expecting\n    try {\n      const data = convertData(response.data);\n\n      return { message: \"ok\", data };\n    } catch {\n      return { message: \"bad-data\", data: response.data };\n    }\n  };\n}\n\nexport default CrescendoRecipeApi;\n","import CrescendoRecipeApi from \"../crescendoRecipeApi\";\n\nclass Api {\n  constructor() {\n    this.api = new CrescendoRecipeApi();\n  }\n\n  /**\n   * Fetches all recipes\n   * @returns {Promise<{ data: {uuid: string, title: string, description: string, images: {full: string, medium: string, small: string}, servings: number, prepTime: number, cookTime: number, postDate: Date, editDate: Date, ingredients: {uuid: string, amount: string, measurement: string, name: string}[], directions: {instructions: string, \"optional\": boolean}[]}[], message: string}>}\n   */\n  getRecipes = () => this.api.getRecipes();\n\n  /**\n   * Fetches a single recipe\n   * @param {string } id\n   * @returns {Promise<{ data: {uuid: string, title: string, description: string, images: {full: string, medium: string, small: string}, servings: number, prepTime: number, cookTime: number, postDate: Date, editDate: Date, ingredients: {uuid: string, amount: string, measurement: string, name: string}[], directions: {instructions: string, \"optional\": boolean}[]}[], message: string}>}\n   */\n  getRecipe = id => this.api.getRecipe(id);\n\n  /**\n   * Fetches specials for a specific set of recipe ingredients\n   * @param {array} ingredients\n   * @returns {Promise<{data: *}>}\n   */\n  getIngredientSpecials = async (ingredients = []) => {\n    const specials = await this.api.getIngredientSpecials();\n\n    const filteredIngredientSpecials = specials.data.filter(special =>\n      ingredients.some(ingredient => special.ingredientId === ingredient.uuid)\n    );\n\n    return { data: filteredIngredientSpecials };\n  };\n\n  /**\n   * Fetches all ingredient specials\n   * @returns {Promise<{data: {geo?: string, ingredientId: string, text?: string, type: string, title: string, uuid: string}, message: string}>}\n   */\n  getSpecials = () => this.api.getIngredientSpecials();\n\n  /**\n   * Fetches a single special\n   * @param id\n   * @returns {Promise<{data: {geo?: string, ingredientId: string, text: string, type: string, title: string, uuid: string}, message: string}>}\n   */\n  getSpecial = id => this.api.getIngredientSpecial(id);\n}\n\nconst instance = new Api();\n\nexport default instance;\n","import Api from './api';\nexport default Api;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Avatar,\n  Badge,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  CardMedia,\n  Chip,\n  IconButton,\n  makeStyles,\n  Tooltip,\n  Typography\n} from \"@material-ui/core\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderOutlinedIcon from \"@material-ui/icons/FavoriteBorderOutlined\";\nimport LoyaltyOutlinedIcon from \"@material-ui/icons/LoyaltyOutlined\";\nimport Img from \"../../ui/img/img\";\nimport { formatTimeFromNow, showNotification } from \"../../../utils/helpers\";\n\nconst useStyles = makeStyles(theme => ({\n  favoriteButton: {},\n  specialsIcon: {\n    color: theme.palette.background.paper,\n    backgroundColor: theme.palette.text.secondary,\n    border: `2px solid ${theme.palette.background.paper}`\n  },\n  recipeTimeIcon: {\n    color: theme.palette.secondary.contrastText,\n    marginLeft: \"auto\"\n  }\n}));\n\nfunction RecipeListItem(props) {\n  const [favorited, setFavorited] = useState(false);\n  const { recipe } = props;\n  const classes = useStyles();\n\n  const handleToggleFavorite = () => {\n    setFavorited(!favorited);\n  };\n\n  const recipeTime = recipe.prepTime + recipe.cookTime;\n  const hasSpecials = recipe.specialsCount > 0;\n\n  return (\n    <div className=\"w-full my-5\" data-testid={recipe.uuid}>\n      <Card className=\"py-5\">\n        <CardHeader\n          avatar={<Avatar>ME</Avatar>}\n          title={<Typography variant=\"h6\">recipe.author</Typography>}\n          subheader={\n            <Typography variant=\"subtitle1\">\n              {formatTimeFromNow(recipe.postDate)}\n            </Typography>\n          }\n          action={\n            <IconButton onClick={handleToggleFavorite}>\n              {favorited ? (\n                <FavoriteIcon color=\"error\" />\n              ) : (\n                <FavoriteBorderOutlinedIcon />\n              )}\n            </IconButton>\n          }\n        />\n        <CardMedia className=\"flex h-320\">\n          <Img src={recipe.images.medium} alt={recipe.title} />\n        </CardMedia>\n        <Link to={`/recipes/${recipe.uuid}`} data-testid={`recipeListItemLink-${recipe.uuid}`}>\n          <CardContent>\n            <div className=\"flex justify-between\">\n              <Typography variant=\"h4\">{recipe.title}</Typography>\n              {hasSpecials && (\n                <Tooltip\n                  title={\n                    <Typography variant=\"caption\">\n                      {recipe.specialsCount} Special Promotions Available!\n                    </Typography>\n                  }\n                  arrow\n                >\n                  <Badge\n                    badgeContent={recipe.specialsCount}\n                    overlap=\"circle\"\n                    classes={{ badge: classes.specialsIcon }}\n                  >\n                    <LoyaltyOutlinedIcon fontSize=\"large\" color=\"primary\" />\n                  </Badge>\n                </Tooltip>\n              )}\n            </div>\n            <Typography variant=\"body1\" component=\"p\" gutterBottom>\n              {recipe.description}\n            </Typography>\n          </CardContent>\n        </Link>\n        <CardActions disableSpacing>\n          <Button onClick={showNotification} size=\"small\">\n            {recipe.specialsCount} Likes\n          </Button>\n          <Button onClick={showNotification} size=\"small\">\n            {recipe.specialsCount} Comments\n          </Button>\n          <Chip\n            icon={<AccessTimeIcon />}\n            label={`${recipeTime} mins`}\n            color=\"primary\"\n            className={classes.recipeTimeIcon}\n          />\n        </CardActions>\n      </Card>\n    </div>\n  );\n}\n\nRecipeListItem.propTypes = {\n  recipe: PropTypes.object.isRequired\n};\n\nexport default RecipeListItem;\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Api from \"../../../services/api\";\nimport RecipeListItem from \"./recipeListItem\";\nimport Suspense from \"../../ui/suspense\";\nimport { toast } from \"react-toastify\";\n\nfunction RecipeListComponent({ recipes }) {\n  return recipes.map(recipe => (\n    <RecipeListItem key={recipe.uuid} recipe={recipe} />\n  ));\n}\n\nRecipeListComponent.propTypes = {\n  recipes: PropTypes.arrayOf(PropTypes.object)\n};\n\nfunction RecipeList() {\n  const [recipes, setRecipes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getRecipeData = async () => {\n      setIsLoading(true);\n\n      const response = await Api.getRecipes();\n\n      if (response.error) {\n        setIsLoading(true);\n\n        toast.error(response.data.message, {\n          autoClose: false\n        });\n\n        console.log(\"error response\", response);\n      } else {\n        setRecipes(response.data);\n\n        setIsLoading(false);\n      }\n    };\n\n    getRecipeData();\n  }, []);\n\n  return (\n    <Suspense\n      loader\n      loadingProps={{\n        isLoading: isLoading,\n        loaderType: \"placeholder\",\n        type: \"blogList\"\n      }}\n    >\n      <RecipeListComponent recipes={recipes} />\n    </Suspense>\n  );\n}\n\nexport default RecipeList;\n"],"sourceRoot":""}